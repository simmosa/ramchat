{"version":3,"sources":["TestAPI.js","RamChat.js","App.js","reportWebVitals.js","index.js"],"names":["Component","socket","io","RamChat","state","conversation","chatInput","room","joinRoom","welcomeDiv","chatDiv","chatStatsDiv","chatTitleDiv","arrowMenu","roomAndConnectionsDiv","nameAndTerminateDiv","alias","participants","onSucessRegistered","message","setState","onMessage","onSuccessfulJoin","msg","aliasName","onParticipants","num","newMessage","handleStartCodeInput","e","target","value","handleStartCodeBtn","emit","handleJoinCodeInput","handleJoinCodeBtn","handleToggleHamburger","handleToggleArrow","handleChatInput","handleChatBtn","handleAliasInput","handleAliasBtn","displayAlias","comment","index","className","on","this","roomName","off","type","placeholder","onChange","onKeyPress","key","onClick","href","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3c8077f.chunk.js","sourcesContent":["\nimport { Component } from 'react'\n\nexport default class TestAPI extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { apiResponse: \"\" };\n    }\n    \n    callAPI() {\n        fetch(\"/testAPI\")\n            .then(res => res.text())\n            .then(res => this.setState({ apiResponse: res }));\n    }\n    \n    componentWillMount() {\n        this.callAPI();\n    }\n\n    render() {\n        return (\n            <p className=\"App-intro\">{this.state.apiResponse}</p>\n        )\n    }\n}","import { Component } from 'react'\nimport { io } from 'socket.io-client'\nimport './RamChat.css'\n\n\nconst socket = io()\n\nexport default class RamChat extends Component {\n    \n    state = {\n        conversation: [],\n        chatInput: '',\n        room: '', // used to match clients on the server, to view the same chat via socket.io\n        joinRoom: '',\n        welcomeDiv: 'welcome-div',\n        // chatBoxDiv: 'chat-box-div hide-element'\n        chatDiv: 'chat-div hide-element',\n        chatStatsDiv: 'chat-stats-div hide-element',\n        chatTitleDiv: 'chat-title-div',\n        arrowMenu: 'arrow arrowRight',\n        roomAndConnectionsDiv: 'room-and-connections-div',\n        nameAndTerminateDiv: 'name-and-terminate-div hide-element',\n\n        alias: '',\n        participants: 0\n    }\n    \n    componentDidMount() {\n        // socket.on('welcome',(message) =>{\n        //     this.setState({\n        //         conversation: [...this.state.conversation, message]\n        //     })\n        // })\n        socket.on('successfulRegistration', this.onSucessRegistered)\n        socket.on('successfulJoin', this.onSuccessfulJoin)\n        socket.on('participants', this.onParticipants)\n        socket.on('message', this.onMessage)\n    }\n    \n    componentWillUnmount() {\n        this.setState({welcomeDiv: 'welcome-div'})\n        this.setState({chatDiv: 'chat-div hide-element'})\n        socket.emit('disconnect', {roomName: this.state.room})\n        socket.off()\n    }\n    \n    \n    onSucessRegistered = (message) => {\n        this.setState({welcomeDiv: 'welcome-div hide-element'})\n        this.setState({chatDiv: 'chat-div'})\n\n        this.setState({alias: 'Host'})\n        this.setState({participants: 1})\n        this.onMessage(message)\n    }\n\n    onSuccessfulJoin = (msg) => { // these 2 fuctions do the same thing. Later versions might have them do different things.\n        this.setState({welcomeDiv: 'welcome-div hide-element'})\n        this.setState({chatDiv: 'chat-div'})\n\n        this.setState({alias: msg.aliasName})\n        this.onMessage(msg)\n    }\n\n    onParticipants = (num) => this.setState({ participants: num})\n    \n    onMessage = (msg) => {\n        let newMessage = {\n            alias: msg.alias,\n            message: msg.message\n        }\n        this.setState({ conversation: [...this.state.conversation, newMessage] })\n    }\n    \n    handleStartCodeInput = (e) => this.setState({room: e.target.value})\n\n    handleStartCodeBtn = () => {\n        let room = this.state.room\n        socket.emit('startRoom', room)\n    }\n\n    handleJoinCodeInput = (e) => this.setState({joinRoom: e.target.value})\n\n    handleJoinCodeBtn = () => { \n        let joinRoom = this.state.joinRoom\n        socket.emit('joinRoom', joinRoom)\n        this.setState({room: joinRoom})\n    }\n    \n\n    handleToggleHamburger = () => {\n        if (this.state.chatStatsDiv === 'chat-stats-div hide-element') {\n           this.setState({chatStatsDiv: 'chat-stats-div'})\n           this.setState({chatTitleDiv: 'chat-title-div hide-element'})\n        } else {\n            this.setState({chatStatsDiv: 'chat-stats-div hide-element'})\n            this.setState({chatTitleDiv: 'chat-title-div'}) \n        }\n    }\n\n    handleToggleArrow = () => {\n        if (this.state.arrowMenu === 'arrow arrowLeft') {\n            this.setState({roomAndConnectionsDiv: 'room-and-connections-div'})\n            this.setState({nameAndTerminateDiv: 'name-and-terminate-div hide-element'})\n            this.setState({arrowMenu: 'arrow arrowRight'})\n        } else {\n            this.setState({roomAndConnectionsDiv: 'room-and-connections-div hide-element'})\n            this.setState({nameAndTerminateDiv: 'name-and-terminate-div'})\n            this.setState({arrowMenu: 'arrow arrowLeft'})\n        }\n    }\n\n    handleChatInput = (e) => this.setState({chatInput: e.target.value})\n\n    handleChatBtn = () => {\n        let message = this.state.chatInput\n        socket.emit('sendmessage', message, this.state.room)\n        this.setState({chatInput: ''})\n    }\n\n    handleAliasInput = (e) => this.setState({alias: e.target.value})\n\n    handleAliasBtn = () => {\n        socket.emit('changeAlias', this.state.alias, this.state.room)\n        this.handleToggleArrow()\n        this.handleToggleHamburger()\n    }\n\n    displayAlias = (comment,index) => {\n        if (comment.alias === '' || comment.alias === this.state.conversation[index-1].alias) {\n            return null\n        } else {\n            if (comment.alias === this.state.alias) {\n                return <p className=\"alias-p alias-of-this-user\"><strong>{comment.alias}</strong></p>\n            } else if (comment.alias === \"announcement\") {\n                return <p className=\"alias-p announcement\">{comment.alias}</p>\n            } else {\n                return <p className=\"alias-p\"><strong>{comment.alias}</strong></p>\n            }\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"ram-chat-main-div\">\n                <div className={this.state.welcomeDiv}>\n                    <h1 className=\"ram-chat-title-h1\">RAM chat 🐏 💻</h1>\n                    <h3><em>Start</em> or <em>Join</em> a chat</h3>\n                    <div className=\"start-chat-div\">\n                        <input className=\"start-code-input\" type=\"text\" placeholder=\"Create a room name\" onChange={this.handleStartCodeInput} onKeyPress={(e) => e.key === 'Enter' ? this.handleStartCodeBtn() : null}/>\n                        <button className=\"start-code-btn\" onClick={this.handleStartCodeBtn}>start room</button>\n                    </div>\n                    <div className=\"join-chat-div\">\n                        <input className=\"join-code-input\" type=\"text\" placeholder=\"Join a room\" onChange={this.handleJoinCodeInput} onKeyPress={(e) => e.key === 'Enter' ? this.handleJoinCodeBtn() : null}/>\n                        <button className=\"join-code-btn\" onClick={this.handleJoinCodeBtn}>join room</button>\n                    </div>\n                </div>\n\n                <div className={this.state.chatDiv}>\n                    <div className=\"chat-menu-div\">\n                        <div className=\"hamburger-menu-div\" onClick={this.handleToggleHamburger}>\n                            <div className=\"burger-container-div\">\n                                <div className=\"burger-div\"></div>\n                                <div className=\"burger-div\"></div>\n                                <div className=\"burger-div\"></div>\n                            </div>\n                        </div>\n                        <div className={this.state.chatStatsDiv}> \n                            <div className=\"slide-menu-div\">\n                                <div className={this.state.roomAndConnectionsDiv}>\n                                    <p>Room Name: <span><strong>{this.state.room}</strong></span></p>\n                                    <p>Participants: <span><strong>{this.state.participants}</strong></span></p>\n                                </div>\n                                <div className={this.state.nameAndTerminateDiv}>\n                                    <div className=\"nickname-div\">\n                                        <p>Alias:\n                                        <input className=\"alias-input\" type=\"text\" placeholder=\"enter alias\" value={this.state.alias} onChange={this.handleAliasInput} onKeyPress={(e) => e.key === 'Enter' ? this.handleAliasBtn() : null}/>\n                                        <button className=\"save-btn\" onClick={this.handleAliasBtn}>save</button>\n                                        </p>\n                                    </div>\n                                    <div className=\"logout-div\">\n                                        <a href=\"/\">logout</a>\n                                    </div>\n                                </div>\n                                <div>\n                                    <i className={this.state.arrowMenu} onClick={this.handleToggleArrow}></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={this.state.chatTitleDiv}>\n                            <h1>RAM chat 🐏 💻</h1>\n                        </div>\n                    </div>\n                    \n                    {/* <div className={this.state.chatBoxDiv}> */}\n                    <div className=\"chat-box-div\">\n                        <ul className=\"chat-ul\">\n                            {/* {this.state.conversation.map((comment, index) => <li className=\"comment-li\" key={index}>{comment}</li> )} */}\n                            {this.state.conversation.map((comment, index) => {\n                                return (\n                                    <div className=\"comment-div\">\n                                        {/* <p className=\"alias-p\">{this.displayAlias(comment,index)}</p> */}\n                                        {this.displayAlias(comment,index)}\n                                        <li className=\"comment-li\" key={index}>{comment.message}</li>\n                                    </div>\n                                )\n                            })}\n                        </ul>\n                        <div className=\"input-field-div\">\n                            <input className=\"chat-input\" type=\"text\" placeholder=\"Type message ...\" onChange={this.handleChatInput} value={this.state.chatInput} onKeyPress={(e) => e.key === 'Enter' ? this.handleChatBtn() : null}/>\n                            <button className=\"chat-btn\" onClick={this.handleChatBtn}>⬆️</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n","import './App.css';\nimport TestAPI from './TestAPI'\nimport RamChat from './RamChat'\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n\n        {/* <TestAPI /> */}\n        <RamChat />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}